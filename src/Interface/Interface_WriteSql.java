package Interface;


import User.Customer.Customer;
import Main.Main;
import Transaction.Order;
import Transaction.OrderDetail;
import Transaction.Payment;
import Product.Product;
import User.Staff.Staff;
import SubInterface.SubInterface_Login_Staff;


import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.hsqldb.types.Types;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author TARUC
 */
public class Interface_WriteSql extends javax.swing.JFrame {

    private int currrent_Button = 0;
    private String sql_file = "";
    private String[] xml_data;
    /**
     * Creates new form WriteSql_Interface
     */
    public Interface_WriteSql() {
        initComponents();
        initComponents_Interface();
        initComponents_SetClose();
        initComponents_ComboBox();
        this.setIconImage(Main.DEFUALT_ICON.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        out_data = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        in_query = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        exequte = new javax.swing.JButton();
        query = new javax.swing.JButton();
        back_to_menu = new javax.swing.JButton();
        export_data = new javax.swing.JButton();
        sque_query = new javax.swing.JButton();
        query_combo = new javax.swing.JComboBox<>();
        sque_run = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Write your query here");

        out_data.setEditable(false);
        out_data.setBackground(new java.awt.Color(34, 34, 34));
        out_data.setColumns(20);
        out_data.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        out_data.setForeground(new java.awt.Color(221, 221, 221));
        out_data.setRows(5);
        jScrollPane1.setViewportView(out_data);

        in_query.setColumns(20);
        in_query.setRows(5);
        in_query.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                submitQuery(evt);
            }
        });
        jScrollPane2.setViewportView(in_query);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Result \\ Output");

        update.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        exequte.setBackground(new java.awt.Color(204, 255, 204));
        exequte.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exequte.setText("Find table");
        exequte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exequteActionPerformed(evt);
            }
        });

        query.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        query.setText("query");
        query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryActionPerformed(evt);
            }
        });

        back_to_menu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        back_to_menu.setText("Back to Menu");
        back_to_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_to_menuActionPerformed(evt);
            }
        });

        export_data.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        export_data.setText("Export data");
        export_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_dataActionPerformed(evt);
            }
        });

        sque_query.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sque_query.setText("Save Query");
        sque_query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sque_queryActionPerformed(evt);
            }
        });

        query_combo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        query_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        query_combo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                query_comboFocusLost(evt);
            }
        });

        sque_run.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sque_run.setText("Run");
        sque_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sque_runActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(query)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exequte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(query_combo, 0, 441, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sque_run, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sque_query)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(export_data)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(back_to_menu))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(query_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(query, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exequte, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sque_query, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(export_data, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(back_to_menu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sque_run, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initComponents_ComboBox(){
        
        Vector comboBoxitem2 = new Vector();
        try
        {          
            comboBoxitem2.add("~ Select");
            File file = new File("result/needuse_query.xml");
            String testXml = "";
            testXml = FileUtils.readFileToString(file);
            xml_data = StringUtils.substringsBetween(testXml, "<useful>", "</useful>");
            for (String xml_data1 : xml_data) {
                comboBoxitem2.add(StringUtils.substringBetween(xml_data1, "<id>", "</id>") + ". " + 
                        StringUtils.substringBetween(xml_data1, "<command>", "</command>"));
            }
        }
        catch(IOException ex)
        {
            System.out.println(ex.getMessage());
        }
        DefaultComboBoxModel comboBoxModel1 = new DefaultComboBoxModel(comboBoxitem2);
        this.query_combo.setModel(comboBoxModel1);
        query_combo.setEditable(false);
    }
    
    private void submitQuery(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_submitQuery

        if (evt.getKeyCode() == 10) {
            if (this.in_query.getText().contains(";")) {
                    this.out_data.append("WriteSql > successful connect run : " + this.in_query.getText() + "\n");                
                    switch (currrent_Button) {
                        case 1:                        
                            this.excuteUpdate_function();
                            break;
                        case 2:
                            this.excuteQuery_function();
                            break;
                        default:
                            this.excute_function();
                            break;
                    }
            }else{
                JOptionPane.showConfirmDialog(null, "In valid query without close tag, please close your query with using ';' before submit. ", "';' Close tag exception", -1);
            }
        }
    }//GEN-LAST:event_submitQuery

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        currrent_Button = 1;
        update.setBackground(Color.decode("#CCFFCC"));
        exequte.setBackground(Color.decode("#ffffff"));
        query.setBackground(Color.decode("#ffffff"));
        
    }//GEN-LAST:event_updateActionPerformed

    private void exequteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exequteActionPerformed
        // TODO add your handling code here:
        currrent_Button = 0;
        update.setBackground(Color.decode("#ffffff"));
        exequte.setBackground(Color.decode("#CCFFCC"));
        query.setBackground(Color.decode("#ffffff"));
        
    }//GEN-LAST:event_exequteActionPerformed

    private void queryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryActionPerformed
        // TODO add your handling code here:
        currrent_Button = 2;
        update.setBackground(Color.decode("#ffffff"));
        query.setBackground(Color.decode("#CCFFCC"));
        exequte.setBackground(Color.decode("#ffffff"));
        
    }//GEN-LAST:event_queryActionPerformed

    private void back_to_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_to_menuActionPerformed
        // TODO add your handling code here:
        new Interface_MenuManager().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_back_to_menuActionPerformed

    private void export_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_dataActionPerformed
        
        JFileChooser run = new JFileChooser();
        if(run.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            File file = run.getSelectedFile();
            if(file.isFile()){
                this.out_data.append("System is overriding your selected file!!");
                file.delete();
            }
            if(file.toString().endsWith(".sql") || file.toString().endsWith(".txt")){
                sql_file = file.getPath();
            }else{
                sql_file = file.getPath() + ".sql";
            }
            // secondary table
            Staff.export_oracle(sql_file);
            Customer.export_oracle(sql_file);
            Product.export_oracle(sql_file);
            
            Order.export_oracle(sql_file);
            OrderDetail.export_oracle(sql_file);
            
            Payment.export_oracle(sql_file);
        }
    }//GEN-LAST:event_export_dataActionPerformed

    private void sque_queryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sque_queryActionPerformed
        String entered_query = this.in_query.getText();
        if(!StringUtils.substringBetween(entered_query, "/*", "*/").matches("[0-9A-Za-z ]*+")){
            JOptionPane.showConfirmDialog(null, "You command content invalid character you only able to write A-Z,a-z and 0-9", "Invalid character", -1);
        }else{
            if (entered_query.contains(";")) {
                if (entered_query.contains("/*") && entered_query.contains("*/")) {
                    
                    File file = new File("result/needuse_query.xml");
                    try {
                        String testXml = "";
                        testXml = FileUtils.readFileToString(file);
                        int last_index = Integer.valueOf(StringUtils.substringBetween(testXml, "<last_tag>", "</last_tag>"));
                        String last_tag = "<last_tag>" + last_index + "</last_tag>";
                        last_index++;
                        String insert_text = "<useful>\n<id>" + last_index + "</id>\n"
                                + "<query>" + entered_query.substring(0, entered_query.indexOf(";")).
                                        replace(System.getProperty("line.separator"), "") + ";" + "</query>\n"
                                + "<command>" + StringUtils.substringBetween(entered_query, "/*", "*/") + "</command>\n"
                                + "</useful>\n<last_tag>" + last_index + "</last_tag>";
                        testXml = testXml.replace(last_tag, insert_text);
                        try {
                            FileWriter fileWriter = new FileWriter("result/useful_query.sql", true), fileWriter2 = new FileWriter("result/needuse_query.xml");
                            try (BufferedWriter buffer = new BufferedWriter(fileWriter); BufferedWriter buffer2 = new BufferedWriter(fileWriter2)) {
                                buffer.write(entered_query + "\n");
                                buffer.flush();
                                buffer.close();
                                buffer2.write(testXml);
                                buffer2.flush();
                                buffer2.close();
                                if (entered_query.length() >= 71) {
                                    this.out_data.append(entered_query.substring(0, 70) + "....>> Your query is saved to result/useful_query.sql!!\n");
                                } else {
                                    this.out_data.append(entered_query + ">> Your query is saved to result/useful_query.sql!!\n");
                                }
                            }
                            initComponents_ComboBox();
                            this.in_query.setText("");
                        } catch (IOException ex) {
                            Logger.getLogger(SubInterface_Login_Staff.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Interface_WriteSql.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                } else {
                    JOptionPane.showConfirmDialog(null, "Please using sql command method to /**/ to cover your command to cover your title for reference for fueture use.", "No title(Command)", -1);
                }
            } else {
                JOptionPane.showConfirmDialog(null, "Error of the query end of line not found in the query. Please use the ';' to cover the end of line of query", "No title(Command)", -1);
            }
        }
    }//GEN-LAST:event_sque_queryActionPerformed

    private void sque_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sque_runActionPerformed
        // TODO add your handling code here:
        submitQuery(new KeyEvent(this.sque_run, 0, 0, 0, 10, 'a'));
    }//GEN-LAST:event_sque_runActionPerformed

    private void query_comboFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_query_comboFocusLost
        // TODO add your handling code here:
        String title = ((String)this.query_combo.getSelectedItem()), query = "";
        if (title.contains(".")) {
            int id_in_xml = Integer.valueOf(title.substring(0, title.indexOf(".")));
            if (xml_data[id_in_xml - 1].contains("<id>" + id_in_xml + "</id>")) {
                query = StringUtils.substringBetween(xml_data[id_in_xml - 1], "<query>", "</query>");                
                title = StringUtils.substringBetween(xml_data[id_in_xml - 1], "<command>", "</command>");                
            } else {
                for (String temp : xml_data) {
                    if (temp.contains("<id>" + id_in_xml + "</id>")) {
                        query = StringUtils.substringBetween(temp, "<query>", "</query>");              
                        title = StringUtils.substringBetween(temp, "<command>", "</command>");                      
                    }
                }
            }
            this.in_query.setText(query + "\n/*" + title + "*/");
        }
    }//GEN-LAST:event_query_comboFocusLost

    /**
     * @param args the command line arguments
     */
    private void initComponents_SetClose() {
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                new Interface_MenuManager().setVisible(true);
            }
        });
    }
    
    private void initComponents_Interface() {
        setTitle("Write Query portal");    
        ImageIcon img = new ImageIcon("resource/POS_icon.png");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_to_menu;
    private javax.swing.JButton exequte;
    private javax.swing.JButton export_data;
    private javax.swing.JTextArea in_query;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea out_data;
    private javax.swing.JButton query;
    private javax.swing.JComboBox<String> query_combo;
    private javax.swing.JButton sque_query;
    private javax.swing.JButton sque_run;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void excute_function() {
       int count;
       ArrayList<String> fromat_str = new ArrayList<String>();
       String maxline_table = "";
       try
        {
            try (Connection conn = DriverManager.getConnection("jdbc:ucanaccess://resource/data/Point_of_sales.mdb;"); Statement s = conn.createStatement()) {
                try{
                    s.execute(this.in_query.getText());
                }catch(SQLException seRs){
                    count = 1;
                    while(seRs != null){
                        this.out_data.append(String.format("%04d", count) + ") Error Sql > Error Message : " + seRs.getMessage() + "( Error code: " + seRs.getErrorCode() + ")\n");
                        this.out_data.append("      Error Sql > SQL Stage     : " + seRs.getSQLState() + "\n");
                        count++;
                        seRs = seRs.getNextException();
                    }
                }
                ResultSet rs = s.getResultSet();
                ResultSetMetaData rsmd = rs.getMetaData();
                int count_col = rsmd.getColumnCount(), str_lenght;
                for(int i = 0; i < count_col; i++)
                    maxline_table += new String(new char[rsmd.getColumnName(i + 1).length() + 4]).replace('\0', '-') + "+";
                maxline_table +=  "\n";
                this.out_data.append(maxline_table);
                for(int i = 0; i < count_col; i++){
                    str_lenght = (rsmd.getColumnName(i + 1).length() + 4);
                    fromat_str.add("%-" + str_lenght + "." + str_lenght + "s|");
                    this.out_data.append(String.format(fromat_str.get(i) , rsmd.getColumnName(i + 1)));
                }
                this.out_data.append("\n");
                this.out_data.append(maxline_table);
                while(rs.next()){
                    for(int i = 0; i < count_col; i++){
                        this.out_data.append(String.format(fromat_str.get(i), rs.getString(i + 1)));
                    }
                    this.out_data.append("\n");
                }
                this.out_data.append(maxline_table);
                this.out_data.append("\n");
                try{
                    this.out_data.append("WriteSql > " + s.getWarnings().getMessage() + "\n");
                }catch(NullPointerException ex){
                    this.out_data.append("WriteSql > " + "The query of you typed is successful built !! " + "\n");
                }
                rs.close();
                s.close();
                conn.close();
            }
        }
        catch(SQLException ex)
        {
            count = 1;
            while(ex != null){
                this.out_data.append(String.format("%04d", count) + ") Error Sql > Error Message : " + ex.getMessage() + "(Error code: " + ex.getErrorCode() + ")\n");
                this.out_data.append("      Error Sql > SQL Stage     : " + ex.getSQLState() + "\n");
                count++;
                ex = ex.getNextException();
            }
        }
    }

    private void excuteQuery_function() {
        int count;
       try
        {
            try (Connection conn = DriverManager.getConnection("jdbc:ucanaccess://resource/data/Point_of_sales.mdb;"); Statement s = conn.createStatement()) {
                try{
                    s.executeQuery(this.in_query.getText());
                }catch(SQLException seRs){
                    count = 1;
                    while(seRs != null){
                        this.out_data.append(String.format("%04d", count) + ") Error Sql > Error Message : " + seRs.getMessage() + "(Error code: " + seRs.getErrorCode() + ")\n");
                        this.out_data.append("      Error Sql > SQL Stage     : " + seRs.getSQLState() + "\n");
                        count++;
                        seRs = seRs.getNextException();
                    }
                }
                try{
                    this.out_data.append("WriteSql > " + s.getWarnings().getMessage() + "\n");
                }catch(NullPointerException ex){
                    this.out_data.append("WriteSql > " + "The query of you typed is successful built !! " + "\n");
                }
                s.close();
                conn.close();
            }
        }
        catch(SQLException ex)
        {
            count = 1;
            while(ex != null){
                this.out_data.append(String.format("%04d", count) + ") Error Sql > Error Message : " + ex.getMessage() + "(Error code: " + ex.getErrorCode() + ")\n");
                this.out_data.append("      Error Sql > SQL Stage     : " + ex.getSQLState() + "\n");
                count++;
                ex = ex.getNextException();
            }
        }
    }

    private void excuteUpdate_function() {
       int count;
       try
        {
            try (Connection conn = DriverManager.getConnection("jdbc:ucanaccess://resource/data/Point_of_sales.mdb;"); Statement s = conn.createStatement()) {
                String[] querys = this.in_query.getText().split(";");
                for(String query: querys){
                    if(!query.equals("\n")){
                        try{
                                s.executeUpdate(query + ";");
                        }catch(SQLException seRs){
                            count = 1;
                            while(seRs != null){
                                this.out_data.append(String.format("%04d", count) + ") Error Sql > Error Message : " + seRs.getMessage() + "(Error code: " + seRs.getErrorCode() + ")\n");
                                this.out_data.append("      Error Sql > SQL Stage     : " + seRs.getSQLState() + "\n");
                                count++;
                                seRs = seRs.getNextException();
                            }
                        }
                        try{
                            this.out_data.append("WriteSql > " + s.getWarnings().getMessage() + "\n");
                        }catch(NullPointerException ex){
                            this.out_data.append("WriteSql > " + "The query of you typed is successful built !! " + "\n");
                        }
                    }
                }
                s.close();
                conn.close();
            }
        }
        catch(SQLException ex)
        {
            count = 1;
            while(ex != null){
                this.out_data.append(String.format("%04d", count) + ") Error Sql > Error Message : " + ex.getMessage() + "(Error code: " + ex.getErrorCode() + ")\n");
                this.out_data.append("      Error Sql > SQL Stage     : " + ex.getSQLState() + "\n");
                count++;
                ex = ex.getNextException();
            }
        }
    }
}
