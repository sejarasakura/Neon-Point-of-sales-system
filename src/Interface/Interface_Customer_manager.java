package Interface;


import User.Customer.Customer;
import Main.Main;
import User.Customer.MemberLevel;
import Transaction.Payment;
import User.Staff.Staff;
import SubInterface.SubInterface_Login_Staff;
import Sql.WriteSql;


import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ITSUKA KOTORI
 */
public class Interface_Customer_manager extends javax.swing.JFrame {

    /**
     * Creates new form Interface_Staff_manager
     */
    
    private JTable customer;
    private final String[] columns;
    private  String[] rows = new String[8];
    private boolean input_validate;
    private DefaultTableModel model = new DefaultTableModel();
    private Staff loginedStaff;
    private String inputException = "";
    private ButtonGroup input_gender_group = new ButtonGroup();
    
    
    public final String getDataDutyStaff(){
        File temp_f = new File("resource/data/staff_id_logedin.txt");
        if (temp_f.isFile()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(temp_f));
                try {
                    return br.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(Interface_MenuManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }catch (FileNotFoundException ex) {
                Logger.getLogger(Interface_MenuManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return "";
    }
    public Interface_Customer_manager() {
        this.columns = new String[]{"Staff ID", "Staff Name", "Phone number", "Join Date", "Gender", "Position", "Address"};
        this.loginedStaff = new Staff(SubInterface_Login_Staff.decode_id(this.getDataDutyStaff()));
        initComponents();
        initComponents_Interface();
        initComponents_Table();
        initComponents_data();
        initComponents_SetClose();
        initComponents_date_time();
        this.bSearch_id_btn.setEnabled(true);
        total_customer.setText("Total Customer Found : " + this.customer.getRowCount());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        data_pane = new javax.swing.JScrollPane();
        submit_pane = new javax.swing.JPanel();
        bCommit_add_btn = new javax.swing.JButton();
        bAdd_new_btn = new javax.swing.JButton();
        bModify_btn = new javax.swing.JButton();
        bCommit_modify_btn = new javax.swing.JButton();
        bRefresh_btn = new javax.swing.JButton();
        bBack_menu_btn = new javax.swing.JButton();
        bDelete_btn = new javax.swing.JButton();
        label_time = new javax.swing.JLabel();
        label_date = new javax.swing.JLabel();
        staff_status_pane = new javax.swing.JPanel();
        bSearch_id_btn = new javax.swing.JButton();
        empty_pane = new javax.swing.JPanel();
        input_staff_id = new javax.swing.JTextField();
        label_staff_id = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        input_address = new javax.swing.JTextArea();
        label_address = new javax.swing.JLabel();
        label_email = new javax.swing.JLabel();
        input_email = new javax.swing.JTextField();
        label_join_date1 = new javax.swing.JLabel();
        input_birthdayDate = new datechooser.beans.DateChooserCombo();
        jPanel1 = new javax.swing.JPanel();
        input_male_gender = new javax.swing.JRadioButton();
        input_new_password = new javax.swing.JPasswordField();
        input_password = new javax.swing.JPasswordField();
        input_female_gender = new javax.swing.JRadioButton();
        input_CustomerLevel = new javax.swing.JComboBox<>();
        input_fName = new javax.swing.JTextField();
        input_lName = new javax.swing.JTextField();
        input_phone = new javax.swing.JTextField();
        label_gender = new javax.swing.JLabel();
        label_lName = new javax.swing.JLabel();
        label_new_password = new javax.swing.JLabel();
        label_old_password = new javax.swing.JLabel();
        label_staff_position = new javax.swing.JLabel();
        input_other_gender = new javax.swing.JRadioButton();
        label_join_date = new javax.swing.JLabel();
        label_fName = new javax.swing.JLabel();
        label_phone = new javax.swing.JLabel();
        label_staff_ic = new javax.swing.JLabel();
        input_staff_ic = new javax.swing.JTextField();
        input_joindate = new datechooser.beans.DateChooserCombo();
        total_customer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bCommit_add_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bCommit_add_btn.setText("Commit Add");
        bCommit_add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCommit_add_btnActionPerformed(evt);
            }
        });

        bAdd_new_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bAdd_new_btn.setText("Add New");
        bAdd_new_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAdd_new_btnActionPerformed(evt);
            }
        });

        bModify_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bModify_btn.setText("Modify");
        bModify_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModify_btnActionPerformed(evt);
            }
        });

        bCommit_modify_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bCommit_modify_btn.setText("Commit Modify");
        bCommit_modify_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCommit_modify_btnActionPerformed(evt);
            }
        });

        bRefresh_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bRefresh_btn.setText("Refresh");
        bRefresh_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefresh_btnActionPerformed(evt);
            }
        });

        bBack_menu_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bBack_menu_btn.setText("Back To Menu");
        bBack_menu_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBack_menu_btnActionPerformed(evt);
            }
        });

        bDelete_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bDelete_btn.setText("Delete");
        bDelete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDelete_btnActionPerformed(evt);
            }
        });

        label_time.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_time.setText("Time : ");

        label_date.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_date.setText("Date : ");

        javax.swing.GroupLayout submit_paneLayout = new javax.swing.GroupLayout(submit_pane);
        submit_pane.setLayout(submit_paneLayout);
        submit_paneLayout.setHorizontalGroup(
            submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(submit_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bDelete_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, submit_paneLayout.createSequentialGroup()
                        .addComponent(bRefresh_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bBack_menu_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                    .addComponent(label_time, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(submit_paneLayout.createSequentialGroup()
                        .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bModify_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bAdd_new_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bCommit_add_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(bCommit_modify_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(submit_paneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(label_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        submit_paneLayout.setVerticalGroup(
            submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, submit_paneLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(label_time, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCommit_add_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bAdd_new_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCommit_modify_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bModify_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(bDelete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bBack_menu_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bRefresh_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(submit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(submit_paneLayout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(label_date, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(296, Short.MAX_VALUE)))
        );

        bSearch_id_btn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bSearch_id_btn.setText("Search");
        bSearch_id_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearch_id_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout empty_paneLayout = new javax.swing.GroupLayout(empty_pane);
        empty_pane.setLayout(empty_paneLayout);
        empty_paneLayout.setHorizontalGroup(
            empty_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        empty_paneLayout.setVerticalGroup(
            empty_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        input_staff_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input_staff_idKeyTyped(evt);
            }
        });

        label_staff_id.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_staff_id.setText("Customer ID");

        input_address.setColumns(20);
        input_address.setRows(5);
        jScrollPane2.setViewportView(input_address);

        label_address.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_address.setText("Address");

        label_email.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_email.setText("Email Address");

        label_join_date1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_join_date1.setText("Brithday date");

        input_birthdayDate.setFieldFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));

        javax.swing.GroupLayout staff_status_paneLayout = new javax.swing.GroupLayout(staff_status_pane);
        staff_status_pane.setLayout(staff_status_paneLayout);
        staff_status_paneLayout.setHorizontalGroup(
            staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, staff_status_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(staff_status_paneLayout.createSequentialGroup()
                        .addComponent(label_staff_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_staff_id, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(staff_status_paneLayout.createSequentialGroup()
                        .addComponent(label_email, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_email, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, staff_status_paneLayout.createSequentialGroup()
                        .addComponent(label_address, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(staff_status_paneLayout.createSequentialGroup()
                        .addComponent(label_join_date1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_birthdayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(empty_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bSearch_id_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );
        staff_status_paneLayout.setVerticalGroup(
            staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staff_status_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSearch_id_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(label_staff_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(input_staff_id, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(staff_status_paneLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(empty_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(staff_status_paneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label_email, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(input_email, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label_join_date1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(input_birthdayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(staff_status_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_address, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );

        jPanel1.setMinimumSize(new java.awt.Dimension(477, 403));

        input_male_gender.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        input_male_gender.setText("Male");

        input_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_passwordActionPerformed(evt);
            }
        });

        input_female_gender.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        input_female_gender.setText("Female");

        input_CustomerLevel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        input_CustomerLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        input_CustomerLevel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                input_CustomerLevelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                input_CustomerLevelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                input_CustomerLevelMouseReleased(evt);
            }
        });
        input_CustomerLevel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                input_CustomerLevelKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                input_CustomerLevelKeyReleased(evt);
            }
        });

        input_fName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_fNameActionPerformed(evt);
            }
        });

        input_lName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_lNameActionPerformed(evt);
            }
        });

        label_gender.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_gender.setText("Gender");

        label_lName.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_lName.setText("Last Name");

        label_new_password.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_new_password.setText("New password");

        label_old_password.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_old_password.setText("Old password");

        label_staff_position.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_staff_position.setText("Member Level");

        input_other_gender.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        input_other_gender.setText("Other");
        input_other_gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_other_genderActionPerformed(evt);
            }
        });

        label_join_date.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_join_date.setText("Join date");

        label_fName.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_fName.setText("First Name");

        label_phone.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_phone.setText("Phone number");

        label_staff_ic.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label_staff_ic.setText("Customer IC");

        input_joindate.setFieldFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));

        total_customer.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        total_customer.setText("Total Customer Found : ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_fName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(input_fName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_lName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(input_lName))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_old_password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_new_password, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_new_password, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_phone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_join_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_joindate, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_gender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(input_male_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(input_female_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(input_other_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(label_staff_position, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_CustomerLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(label_staff_ic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input_staff_ic, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(total_customer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(label_fName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_lName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(input_lName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(input_fName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label_staff_ic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(input_staff_ic, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_old_password, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label_new_password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(input_new_password, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label_phone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(input_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label_join_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(input_joindate, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(input_male_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(input_female_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(input_other_gender, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(input_CustomerLevel)
                    .addComponent(label_staff_position, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total_customer, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(data_pane)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(staff_status_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submit_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(staff_status_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submit_pane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(data_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void input_fNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_fNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_fNameActionPerformed

    private void input_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_passwordActionPerformed

    private void input_other_genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_other_genderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_other_genderActionPerformed

    // modlify button
    private void bModify_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModify_btnActionPerformed

        Customer cust = new Customer((String)customer.getValueAt(customer.getSelectedRow(), 0));
        this.partButton(false);
        this.bCommit_modify_btn.setEnabled(true);
        this.change_refresh_buttonTo_cancle(true);
        this.set_input(cust.getUser_id());
        this.openInput();
    }//GEN-LAST:event_bModify_btnActionPerformed
    //done
    private void bCommit_modify_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCommit_modify_btnActionPerformed
        int i = customer.getSelectedRow();
        Customer data = get_input();
        if (data != null) {
            if (JOptionPane.showConfirmDialog(null, "Are you sure want to modify the record of " + data.getUser_id() + ", you will not able to recover ? ", "Confrim Modify", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                this.partButton(true);
                this.bCommit_modify_btn.setEnabled(false);
                this.change_refresh_buttonTo_cancle(false);
                model.setValueAt(data.getUser_id(), i, 0);
                model.setValueAt(data.getFullName(), i, 1);
                model.setValueAt(data.getPhoneNumber(), i, 2);
                model.setValueAt(WriteSql.DATE_FORMAT.format(data.getBrithdayDate()), i, 3);
                model.setValueAt(data.getGender().toString(), i, 4);
                model.setValueAt(data.getLevel().toString(), i, 5);
                model.setValueAt(data.getAddress(), i, 6);
                this.set_input();
                this.closeInput();
                data.modify_this();
            } 
        }else {
            JOptionPane.showConfirmDialog(null, "Invalid input data is found as following in your input, Please enter the correct data.\n" + inputException, "Invalid input data", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bCommit_modify_btnActionPerformed
    // done
    private void bAdd_new_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAdd_new_btnActionPerformed
        this.partButton(false);
        this.set_input();
        this.bCommit_add_btn.setEnabled(true);
        this.change_refresh_buttonTo_cancle(true);
        this.openInput_add_new();
        this.input_staff_id.setText(new Staff(SubInterface_Login_Staff.decode_id(getDataDutyStaff())).generate_id("Other").substring(2, 6));
        this.customer.clearSelection();
    }//GEN-LAST:event_bAdd_new_btnActionPerformed
// done
    private void bCommit_add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCommit_add_btnActionPerformed
        Customer data;
        data = get_input();
        if (data != null) {
            if (JOptionPane.showConfirmDialog(null, "Are you sure want to add the record of " + data.getFullName() + " as a new " + data.getLevel().toString() + " member ? ", "Confrim Add", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                data.setUser_id(data.generate_id(data.getLevel().id_front_code()));
                if (WriteSql.getUniqueInt("SELECT COUNT(customer_id) FROM Customer WHERE email_address='" + data.getEmail() + "';") == 0) {
                    this.set_input();
                    this.input_staff_id.setText(new Staff(SubInterface_Login_Staff.decode_id(getDataDutyStaff())).generate_id(this.input_CustomerLevel.getSelectedItem().toString()));                    
                    this.partButton(true);
                    System.out.println(data.toString());
                    if (data.write_this()) {
                        System.out.println("Successful");
                    } else {
                        System.out.println("Fail to access");
                    }
                    this.write_table_row(data);
                    this.bCommit_add_btn.setEnabled(false);
                    this.change_refresh_buttonTo_cancle(false);
                    this.closeInput();
                    this.set_input();
                }
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Invalid input data found as follow, please check back you input. " + inputException, "Adding error", JOptionPane.WARNING_MESSAGE);
        }
        total_customer.setText("Total Customer Found : " + this.customer.getRowCount());
        
    }//GEN-LAST:event_bCommit_add_btnActionPerformed
    // done
    private void bDelete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDelete_btnActionPerformed
        
        Customer temp;
        if(customer.getSelectedRow() >= 0)
            temp = new Customer(model.getValueAt(customer.getSelectedRow(), 0).toString());
        else
            temp = new Customer(this.input_staff_id.getText());

        if (JOptionPane.showConfirmDialog(null, "Are you sure want to delete the customer record of " + temp.getUser_id() + ", it will not able to recover ? ", "Confrim Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (customer.getSelectedRow() >= 0) {
                model.removeRow(customer.getSelectedRow());
                if (temp.delete_this()) {
                    System.out.println("The staff is successful deleted by user : " + SubInterface_Login_Staff.decode_id(this.getDataDutyStaff()));
                } else {
                    System.out.println("The file is cannot access by the system, please check back the data");
                }
                this.customer.clearSelection();
            } else {
                boolean found = false;
                for (int i = 0; i < customer.getRowCount(); i++) {
                    if (model.getValueAt(i, 0).equals(temp.getUser_id())) {
                        found = true;
                        customer.remove(i);
                        temp.delete_this();
                        set_input();
                    }
                }
                if (found) {
                    System.out.println("Delete staff successful !!");
                }
            }
        }
        total_customer.setText("Total Customer Found : " + this.customer.getRowCount());
    }//GEN-LAST:event_bDelete_btnActionPerformed
    //done
    private void bRefresh_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefresh_btnActionPerformed
        this.set_input();
        if(this.bRefresh_btn.getText().equals("Cancel")){
            this.partButton(true);
            this.change_refresh_buttonTo_cancle(false);
        }
        else{
            while(this.model.getRowCount() > 0){
                this.model.removeRow(0);
            }
            this.initComponents_data();
        }
        total_customer.setText("Total Customer Found : " + this.customer.getRowCount());
    }//GEN-LAST:event_bRefresh_btnActionPerformed

    private void bSearch_id_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearch_id_btnActionPerformed
        if(this.bSearch_id_btn.getText().equals("Search")){
            this.bSearch_id_btn.setText("Find");
            this.input_staff_id.setEditable(true);
        }else if(this.bSearch_id_btn.getText().equals("Find")){
            this.bSearch_id_btn.setText("Search");
            this.input_staff_id.setEditable(false);
            if(WriteSql.getUniqueInt("SELECT COUNT(*) FROM CUSTOMER WHERE customer_id='" + input_staff_id.getText() +  "';") == 1){
                this.set_input(input_staff_id.getText());
                int select = setSelection();
                customer.setRowSelectionInterval(select, select);
            }else{
                this.set_input();
                input_staff_id.setText("No record found");
            }
        }
    }//GEN-LAST:event_bSearch_id_btnActionPerformed

    private int setSelection(){
        if(WriteSql.getUniqueInt("SELECT COUNT(*) FROM CUSTOMER WHERE customer_id='" + input_staff_id.getText() +  "';") == 1){
            for(int i = 0; i < customer.getRowCount(); i++){
                if(input_staff_id.getText() == null ? (String)customer.getValueAt(i,0) == null : input_staff_id.getText().equals((String)customer.getValueAt(i,0))){
                    return i;
                }
            }
        }
        return -1;
    }
    
    private void input_CustomerLevelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_CustomerLevelKeyReleased
        // TODO add your handling code here
    }//GEN-LAST:event_input_CustomerLevelKeyReleased

    private void input_CustomerLevelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_input_CustomerLevelMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_input_CustomerLevelMouseReleased

    private void input_CustomerLevelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_input_CustomerLevelMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_input_CustomerLevelMouseExited

    private void input_CustomerLevelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_input_CustomerLevelMousePressed
        // TODO add your handling code here
    }//GEN-LAST:event_input_CustomerLevelMousePressed

    private void input_CustomerLevelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_CustomerLevelKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_CustomerLevelKeyPressed

    private void bBack_menu_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBack_menu_btnActionPerformed
        SubInterface_Login_Staff.validate_login_go(new Staff(SubInterface_Login_Staff.decode_id(getDataDutyStaff())));
        dispose();
    }//GEN-LAST:event_bBack_menu_btnActionPerformed

    private void input_staff_idKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_staff_idKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_input_staff_idKeyTyped

    private void input_lNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_lNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_lNameActionPerformed
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd_new_btn;
    private javax.swing.JButton bBack_menu_btn;
    private javax.swing.JButton bCommit_add_btn;
    private javax.swing.JButton bCommit_modify_btn;
    private javax.swing.JButton bDelete_btn;
    private javax.swing.JButton bModify_btn;
    private javax.swing.JButton bRefresh_btn;
    private javax.swing.JButton bSearch_id_btn;
    private javax.swing.JScrollPane data_pane;
    private javax.swing.JPanel empty_pane;
    private javax.swing.JComboBox<String> input_CustomerLevel;
    private javax.swing.JTextArea input_address;
    private datechooser.beans.DateChooserCombo input_birthdayDate;
    private javax.swing.JTextField input_email;
    private javax.swing.JTextField input_fName;
    private javax.swing.JRadioButton input_female_gender;
    private datechooser.beans.DateChooserCombo input_joindate;
    private javax.swing.JTextField input_lName;
    private javax.swing.JRadioButton input_male_gender;
    private javax.swing.JPasswordField input_new_password;
    private javax.swing.JRadioButton input_other_gender;
    private javax.swing.JPasswordField input_password;
    private javax.swing.JTextField input_phone;
    private javax.swing.JTextField input_staff_ic;
    private javax.swing.JTextField input_staff_id;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_address;
    private javax.swing.JLabel label_date;
    private javax.swing.JLabel label_email;
    private javax.swing.JLabel label_fName;
    private javax.swing.JLabel label_gender;
    private javax.swing.JLabel label_join_date;
    private javax.swing.JLabel label_join_date1;
    private javax.swing.JLabel label_lName;
    private javax.swing.JLabel label_new_password;
    private javax.swing.JLabel label_old_password;
    private javax.swing.JLabel label_phone;
    private javax.swing.JLabel label_staff_ic;
    private javax.swing.JLabel label_staff_id;
    private javax.swing.JLabel label_staff_position;
    private javax.swing.JLabel label_time;
    private javax.swing.JPanel staff_status_pane;
    private javax.swing.JPanel submit_pane;
    private javax.swing.JLabel total_customer;
    // End of variables declaration//GEN-END:variables

    private void initComponents_Interface() {
        this.partButton(false);
        this.bAdd_new_btn.setEnabled(true);
        setTitle("Customer profile manager");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setIconImage(Main.DEFUALT_ICON.getImage());
        this.input_CustomerLevel.setModel(new DefaultComboBoxModel<>(new String[] {
            "~ Select", MemberLevel.myValueOf(0).toString() , MemberLevel.myValueOf(1).toString() , MemberLevel.myValueOf(2).toString() , MemberLevel.myValueOf(3).toString() , MemberLevel.myValueOf(4).toString() 
        }));
        this.closeInput();
        input_gender_group.add(this.input_female_gender);
        input_gender_group.add(this.input_male_gender);
        input_gender_group.add(this.input_other_gender);
    }

    private void initComponents_Table() {
        customer = new JTable(){ @Override public boolean isCellEditable(int rowIndex, int colIndex){ return false; /* disable edit */}};
        this.data_pane.add(customer);
        model = new DefaultTableModel(0,7);
        model.setColumnIdentifiers(columns);
        customer.setModel(model);
        customer.setBackground(Color.white);
        customer.setForeground(Color.DARK_GRAY);
        data_pane.setViewportView(customer);

        Font font = new Font("", 0, 12);
        customer.setFont(font);
        customer.setRowHeight(20);
        customer.getColumnModel().getColumn(0).setPreferredWidth(70);
        customer.getColumnModel().getColumn(1).setPreferredWidth(140);
        customer.getColumnModel().getColumn(2).setPreferredWidth(120);
        customer.getColumnModel().getColumn(3).setPreferredWidth(100);
        customer.getColumnModel().getColumn(4).setPreferredWidth(90);
        customer.getColumnModel().getColumn(5).setPreferredWidth(160);
        customer.getColumnModel().getColumn(6).setPreferredWidth(580);
        
        customer.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                    productTableactive();
            }
        });
        
                
        customer.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN){
                     productTableactive();
                }
            }
        });
    }

    private void initComponents_data() {
      Customer temp = new Customer();
      try
        {            
            try (Connection conn = DriverManager.getConnection("jdbc:ucanaccess://resource/data/Point_of_sales.mdb;"); Statement s = conn.createStatement()) {
                s.execute("SELECT * FROM Customer ORDER BY SUBSTRING(CUSTOMER_ID,3,8);");
                ResultSet result = s.getResultSet();
                while(result.next()){
                    temp.split(result);
                    this.write_table_row(temp);
                }
                result.close();
                s.close();
                conn.close();
            }
        }
        catch(SQLException ex){
            Logger.getLogger(Payment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initComponents_date_time() {
        Date today = new Date();
        SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat timeformat = new SimpleDateFormat("hh:mm:ss");
        label_time.setText("Date: " + format.format(today));
        this.label_date.setText("Time: " + timeformat.format(today));
    }

    private void initComponents_SetClose() {
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                bBack_menu_btnActionPerformed(null);
            }
        });
    }
    
    private void closeInput(){
        this.input_CustomerLevel.setEditable(false);
        this.input_CustomerLevel.setEnabled(false);
        this.input_address.setEditable(false);
        this.input_fName.setEditable(false);
        this.input_female_gender.setEnabled(false);
        this.input_male_gender.setEnabled(false);
        this.input_other_gender.setEnabled(false);
        this.input_joindate.setEnabled(false);
        this.input_lName.setEditable(false);
        this.input_password.setEditable(false);
        this.input_phone.setEditable(false);
        this.input_new_password.setEditable(false);
        this.input_staff_id.setEditable(false);
        this.input_staff_ic.setEditable(false);
        this.input_email.setEditable(false);
    }
    
    private void openInput(){
        this.input_CustomerLevel.setEditable(true);
        this.input_CustomerLevel.setEnabled(true);
        this.input_joindate.setEnabled(true);
        this.input_address.setEditable(true);
        this.input_fName.setEditable(true);
        this.input_female_gender.setEnabled(true);
        this.input_male_gender.setEnabled(true);
        this.input_other_gender.setEnabled(true);
        this.input_lName.setEditable(true);
        this.input_phone.setEditable(true);
        this.input_password.setEditable(true);
        this.input_new_password.setEditable(true);
        this.input_staff_id.setEditable(false);
        this.input_staff_ic.setEditable(true);
        this.input_email.setEditable(true);
    }
    //done
    private void openInput_add_new(){
            this.input_CustomerLevel.setEditable(true);
            this.input_CustomerLevel.setEnabled(true);
            this.input_joindate.setEnabled(true);
            this.input_birthdayDate.setEnabled(true);
            this.input_address.setEditable(true);
            this.input_fName.setEditable(true);
            this.input_female_gender.setEnabled(true);
            this.input_male_gender.setEnabled(true);
            this.input_other_gender.setEnabled(true);
            this.input_lName.setEditable(true);
            this.input_phone.setEditable(true);
            this.input_password.setEditable(true);
            this.input_new_password.setEditable(true);
            this.input_staff_id.setEditable(false);
            this.input_staff_ic.setEditable(true);
            this.input_email.setEditable(true);
    }
    
    private void partButton(boolean status){
        this.bAdd_new_btn.setEnabled(status);
        this.bBack_menu_btn.setEnabled(true);// if exit force stop all process and will not save
        this.bCommit_add_btn.setEnabled(false);
        this.bCommit_modify_btn.setEnabled(false);
        this.bDelete_btn.setEnabled(false);
        this.bModify_btn.setEnabled(false);
        this.bRefresh_btn.setEnabled(true);// force refresh all will stop
        this.bSearch_id_btn.setEnabled(status);
    }
    
    private void allButton(boolean status){
        this.bAdd_new_btn.setEnabled(status);
        this.bBack_menu_btn.setEnabled(true);// if exit force stop all process and will not save
        this.bCommit_add_btn.setEnabled(false);
        this.bCommit_modify_btn.setEnabled(false);
        this.bDelete_btn.setEnabled(status);
        this.bModify_btn.setEnabled(status);
        this.bRefresh_btn.setEnabled(true);// force refresh all will stop
        this.bSearch_id_btn.setEnabled(status);
    }
    //done
    private void productTableactive(){
        allButton(true);
        int i = this.customer.getSelectedRow();
        this.set_input(model.getValueAt(i, 0).toString());
        this.closeInput();
    }
    // done
    private void write_table_row(Customer temp) {
        String[] data = new String[7];
        data[0] = temp.getUser_id();
        data[1] = temp.getFullName();
        data[2] = temp.getPhoneNumber();
        data[3] = WriteSql.DATE_FORMAT.format(temp.getBrithdayDate());
        data[4] = temp.getGender().toString();
        data[5] = temp.getLevel().toString();
        data[6] = temp.getAddress();
        this.model.addRow(data);
    }
    // ddone
    private void change_refresh_buttonTo_cancle(boolean status_X){
        if(status_X){
            this.bRefresh_btn.setEnabled(true);
            this.bRefresh_btn.setText("Cancel");
        }
        else{
            this.bRefresh_btn.setText("Refresh");
        }
        closeInput();
    }
    //done
    private Customer get_input() {
        Customer data = new Customer(this.input_staff_id.getText());
        inputException = "";
        boolean validated_data = true;
        data.setLevel((String)this.input_CustomerLevel.getSelectedItem());
        validated_data &= data.setAddress(this.input_address.getText());
        if(!validated_data){
            inputException += "Invalid home address found ',' scharacter is not valid in address\n";
        }
        validated_data &= data.setJoinDate(this.input_joindate.getSelectedDate().getTime());
        validated_data &= data.setBrithdayDate(this.input_birthdayDate.getSelectedDate().getTime());
        validated_data &= data.setName(this.input_lName.getText(),this.input_fName.getText());
        if(!validated_data){
            inputException += "Invalid name found your name should be only include A-Z or a-z character only\n";
        }
        validated_data &= data.setPhoneNumber(this.input_phone.getText());
        if(!validated_data){
            inputException += "Invalid phone number format please enter in format 019-9999999 (Malaysia) other country not support yet.\n";
        }
        if(!("".equals(this.input_new_password.getText()) || this.input_new_password.getText() == null || "".equals(this.input_password.getText()) || this.input_password.getText() == null)){
            if (input_new_password.getText().length() >= 8 && input_password.getText().length() >= 8) {
                validated_data &= data.setFristPassword(this.input_new_password.getText(), this.input_password.getText());
                if (!validated_data) {
                    inputException += "The password is not match to the confrim password. \n";
                }
            }else{
                inputException += "The password lenght is not enough please enter at least 8 word to protect the account. \n";
            }
        }
        validated_data &= data.setUser_ic(this.input_staff_ic.getText());
        if(!validated_data){
            inputException += "Invalid IC number ther IC number format, the correct format is 999999-99-9999.\n";
        }
        validated_data &= data.setEmail(this.input_email.getText());
        if(!validated_data){
            inputException += "Invalid Email adderess found, please enter the correct format.\n";
        }
        if(this.input_female_gender.isSelected()){
            data.setGender("F");
        }else{
            data.setGender("M");
        }
        if(validated_data == true){
            return data;
        }else{
            return null;
        }
    }
    //done
    private void set_input() {
        this.input_CustomerLevel.setSelectedItem("~ Select");
        this.input_address.setText("");
        this.input_fName.setText("");
        this.input_female_gender.setSelected(false);
        this.input_male_gender.setSelected(false);
        this.input_other_gender.setSelected(false);
        this.input_joindate.setText("Date : " + WriteSql.DATE_FORMAT.format(Main.getToday_date()));
        this.input_birthdayDate.setText("Date : " + WriteSql.DATE_FORMAT.format(Main.getToday_date()));
        this.input_lName.setText("");
        this.input_password.setText("");
        this.input_phone.setText("");
        this.input_new_password.setText("");
        this.input_staff_id.setText("");
        this.input_staff_ic.setText("");
        this.input_email.setText("");
    }
    //done
    private void set_input(String cust_id) {
        Customer cust = new Customer(cust_id);
        this.input_CustomerLevel.setSelectedItem((String)cust.getLevel().toString());
        this.input_address.setText(cust.getAddress());
        this.input_fName.setText(cust.getfName());
        this.input_joindate.setText("Date : " + WriteSql.DATE_FORMAT.format(cust.getJoin_date()));
        this.input_birthdayDate.setText("Date : " + WriteSql.DATE_FORMAT.format(cust.getBrithdayDate()));
        this.input_lName.setText(cust.getlName());
        this.input_password.setText("");
        this.input_phone.setText(cust.getPhoneNumber());
        this.input_new_password.setText("");
        this.input_staff_id.setText(cust.getUser_id());
        this.input_staff_ic.setText(cust.getUser_ic());
        this.input_email.setText(cust.getEmail());
        this.input_female_gender.setSelected(false);
        this.input_male_gender.setSelected(false);
        this.input_other_gender.setSelected(false);
        if(null == cust.getGender()){
            this.input_other_gender.setSelected(true);
        }
        else switch (cust.getGender()) {
            case FEMALE:
                this.input_female_gender.setSelected(true);
                break;
            case MALE:
                this.input_male_gender.setSelected(true);
                break;
            default:
                this.input_other_gender.setSelected(true);
                break;
        }
        System.out.println(cust.toString());
    }
    
}
